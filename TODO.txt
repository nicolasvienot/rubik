//     let mut cube: Cube = Cube::new();

    // Making a list of Moves based on arguments
//     let _moves: Vec<Move> = match Move::get_moves_list(&_args) {
//         Some(value) => value,
//         None => return
//     };

    // [!] Debug : Display given Moves
//     display::display_moves(&_moves);

    // Shuffle the cube
//     Move::cube_shuffle(&mut cube, &_moves);

    // Search for a solution
//     let _solution: Vec<Move> = Search::cube_solver(&mut cube);

    // Display solution
//     display::display_solution(&_solution);

/* ---------------------------------------------------------------------------------
TESTS / RESEARCH / DRAFT :

[URF, UFL, ULB, UBR, DFR, DLF, DBL, DRB]
[0, 0, 0, 0, 0, 0, 0, 0]
[UR, UF, UL, UB, DR, DF, DL, DB, FR, FL, BL, BR]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

        [T T T]
        [T T T]
        [T T T]

[L L L] [F F F] [R R R] [B B B]
[L L L] [F F F] [R R R] [B B B]
[L L L] [F F F] [R R R] [B B B]

        [D D D]
        [D D D]
        [D D D]

------
UP ROTATION :

[URF, UFL, ULB, UBR, DFR, DLF, DBL, DRB]
[0, 0, 0, 0, 0, 0, 0, 0]
[UR, UF, UL, UB, DR, DF, DL, DB, FR, FL, BL, BR]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

        [T T T]
        [T T T]
        [T T T]

[F F F] [R R R] [B B B] [L L L]
[L L L] [F F F] [R R R] [B B B]
[L L L] [F F F] [R R R] [B B B]

        [D D D]
        [D D D]
        [D D D]

----------------------------------------------------------------------------------*/


    fn apply_move(_cube: &mut Cube, _move: &Move) {
        // code here
    }

    /*
    [A, B, C, D, E, F, G, H],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [A, B, C, D, E, F, G, H, I, J, K, L],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    =
    [B, F, C, D, A, E, G, H],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [A, J, C, D, E, I, G, H, B, F, K, L],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    */
    fn front_rot_r() {
        cube.c[0] = cube.c[1];
        cube.c[1] = cube.c[5];
        cube.c[4] = cube.c[0];
        cube.c[5] = cube.c[4];

        cube.e[1] = cube.e[9];
        cube.e[5] = cube.e[8];
        cube.e[8] = cube.e[1];
        cube.e[9] = cube.e[5];
    }

    /*
    [A, B, C, D, E, F, G, H],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [A, B, C, D, E, F, G, H, I, J, K, L],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    =
    [E, A, C, D, F, B, G, H],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [A, I, C, D, E, J, G, H, F, B, K, L],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    */
    fn front_rot_l() {
        cube.c[0] = cube.c[4];
        cube.c[1] = cube.c[0];
        cube.c[4] = cube.c[5];
        cube.c[5] = cube.c[1];

        cube.e[1] = cube.e[8];
        cube.e[5] = cube.e[9];
        cube.e[8] = cube.e[5];
        cube.e[9] = cube.e[1];
    }

    /*
    [A, B, C, D, E, F, G, H],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [A, B, C, D, E, F, G, H, I, J, K, L],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    =
    [F, E, C, D, B, A, G, H],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [A, B, C, D, E, F, G, H, I, J, K, L],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    */
    fn front_rot_d() {
        cube.c[0] = cube.c[5];
        cube.c[1] = cube.c[4];
        cube.c[4] = cube.c[1];
        cube.c[5] = cube.c[0];
    }